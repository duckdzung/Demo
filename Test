import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

@Configuration
@PropertySource("classpath:application.properties")
public class AppConfig {
}

--spring.config.location=file:src/main/resources/application.properties

spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import javax.annotation.PostConstruct;

@Controller
public class AppController {

    @Value("${app.name:NOT_FOUND}") // Nếu không tìm thấy sẽ trả về "NOT_FOUND"
    private String appName;

    @PostConstruct
    public void init() {
        System.out.println("App Name: " + appName);
    }
}
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;
import java.time.LocalDate;

public class EventValidator implements Validator {

    @Override
    public boolean supports(Class<?> clazz) {
        return Event.class.equals(clazz);
    }

    @Override
    public void validate(Object target, Errors errors) {
        Event event = (Event) target;

        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "startDate", "not.blank");
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "endDate", "not.blank");

        if (event.getStartDate() != null && event.getEndDate() != null) {
            if (!event.getStartDate().isBefore(event.getEndDate())) {
                errors.rejectValue("endDate", "date.range");
            }
        }
    }
}

@RequestMapping(value = "/event", method = RequestMethod.POST)
public String submitForm(@ModelAttribute("event") Event event, BindingResult result) {
    new EventValidator().validate(event, result);

    if (result.hasErrors()) {
        return "eventForm";
    }
    return "success";
}


logging.level.org.springframework=DEBUG


